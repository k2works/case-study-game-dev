(ns puyo.player)

(defn 入力状態作成
  "入力状態を作成する"
  []
  {:左 (atom false)
   :右 (atom false)
   :上 (atom false)
   :下 (atom false)})

(defn キー押下処理
  "キー押下時の処理"
  [入力状態 キーコード]
  (case キーコード
    "ArrowLeft" (reset! (:左 入力状態) true)
    "ArrowRight" (reset! (:右 入力状態) true)
    "ArrowUp" (reset! (:上 入力状態) true)
    "ArrowDown" (reset! (:下 入力状態) true)
    nil))

(defn キー離上処理
  "キー解放時の処理"
  [入力状態 キーコード]
  (case キーコード
    "ArrowLeft" (reset! (:左 入力状態) false)
    "ArrowRight" (reset! (:右 入力状態) false)
    "ArrowUp" (reset! (:上 入力状態) false)
    "ArrowDown" (reset! (:下 入力状態) false)
    nil))

(defn キーボードイベント設定
  "キーボードイベントをセットアップする"
  [入力状態]
  (.addEventListener js/document "keydown"
                     (fn [e] (キー押下処理 入力状態 (.-key e))))
  (.addEventListener js/document "keyup"
                     (fn [e] (キー離上処理 入力状態 (.-key e)))))

(defn ぷよ作成
  "新しいぷよを作成する"
  []
  {:x座標 2
   :y座標 0
   :タイプ (inc (rand-int 4)) ; 1-4のランダムな値
   :回転状態 0})

(defn 左に移動
  "ぷよを左に移動する"
  [ぷよ状態 設定]
  (if (> (:x座標 ぷよ状態) 0)
    (update ぷよ状態 :x座標 dec)
    ぷよ状態))

(defn 右に移動
  "ぷよを右に移動する"
  [ぷよ状態 設定]
  (if (< (:x座標 ぷよ状態) (dec (:ステージ列数 設定)))
    (update ぷよ状態 :x座標 inc)
    ぷよ状態))

(defn 右回転
  "時計回りに回転する"
  [ぷよ状態]
  (update ぷよ状態 :回転状態 #(mod (inc %) 4)))

(defn 左回転
  "反時計回りに回転する"
  [ぷよ状態]
  (update ぷよ状態 :回転状態 #(mod (+ % 3) 4)))

(defn 子オフセット取得
  "回転状態に応じた子ぷよのオフセットを取得"
  [回転状態]
  (case 回転状態
    0 {:x座標 0 :y座標 -1}  ; 上
    1 {:x座標 1 :y座標 0}   ; 右
    2 {:x座標 0 :y座標 1}   ; 下
    3 {:x座標 -1 :y座標 0}  ; 左
    {:x座標 0 :y座標 -1}))  ; デフォルト

(defn 回転実行
  "回転を実行し、必要に応じて壁キックを行う"
  [ぷよ状態 設定 回転fn]
  (let [回転後 (回転fn ぷよ状態)
        オフセット (子オフセット取得 (:回転状態 回転後))
        子x座標 (+ (:x座標 回転後) (:x座標 オフセット))]
    (cond
      ;; 右壁にめり込む場合、左に移動
      (>= 子x座標 (:ステージ列数 設定))
      (update 回転後 :x座標 dec)

      ;; 左壁にめり込む場合、右に移動
      (< 子x座標 0)
      (update 回転後 :x座標 inc)

      ;; 壁にめり込まない場合、そのまま
      :else
      回転後)))

(defn 下に移動
  "ぷよを下に移動する"
  [ぷよ状態 設定]
  (if (< (:y座標 ぷよ状態) (dec (:ステージ行数 設定)))
    (update ぷよ状態 :y座標 inc)
    ぷよ状態))

(defn 着地判定?
  "ぷよが着地したかどうかを判定"
  [ぷよ状態 盤面 設定]
  (let [オフセット (子オフセット取得 (:回転状態 ぷよ状態))
        軸y座標 (:y座標 ぷよ状態)
        軸x座標 (:x座標 ぷよ状態)
        子y座標 (+ 軸y座標 (:y座標 オフセット))
        子x座標 (+ 軸x座標 (:x座標 オフセット))
        軸下y座標 (inc 軸y座標)
        子下y座標 (inc 子y座標)]
    (or
     ;; 軸ぷよが底に到達
     (>= 軸下y座標 (:ステージ行数 設定))
     ;; 子ぷよが底に到達（範囲内にある場合のみチェック）
     (and (>= 子y座標 0)
          (< 子y座標 (:ステージ行数 設定))
          (>= 子下y座標 (:ステージ行数 設定)))
     ;; 軸ぷよの下にぷよがある
     (and (< 軸下y座標 (:ステージ行数 設定))
          (pos? (get-in 盤面 [軸下y座標 軸x座標])))
     ;; 子ぷよの下にぷよがある（子ぷよが範囲内にある場合のみチェック）
     (and (>= 子y座標 0)
          (< 子y座標 (:ステージ行数 設定))
          (< 子下y座標 (:ステージ行数 設定))
          (pos? (get-in 盤面 [子下y座標 子x座標]))))))

(defn ぷよ更新
  "入力に応じてぷよを更新する（回転を含む）"
  [ぷよ状態 入力状態 設定]
  (cond
    @(:左 入力状態)
    (do
      (reset! (:左 入力状態) false)
      (左に移動 ぷよ状態 設定))

    @(:右 入力状態)
    (do
      (reset! (:右 入力状態) false)
      (右に移動 ぷよ状態 設定))

    @(:上 入力状態)
    (do
      (reset! (:上 入力状態) false)
      (回転実行 ぷよ状態 設定 右回転))

    @(:下 入力状態)
    (do
      (reset! (:下 入力状態) false)
      (下に移動 ぷよ状態 設定))

    :else
    ぷよ状態))
