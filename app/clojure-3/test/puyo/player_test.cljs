(ns puyo.player-test
  (:require [cljs.test :refer-macros [deftest is testing]]
            [puyo.player :as player]))

(deftest キー入力検出テスト
  (testing "左キーが押されると、左向きの移動フラグが立つ"
    (let [入力状態 (player/入力状態作成)]
      ;; 左キー押下をシミュレート
      (player/キー押下処理 入力状態 "ArrowLeft")

      (is (true? @(:左 入力状態)) "左フラグがtrueになる")))

  (testing "右キーが押されると、右向きの移動フラグが立つ"
    (let [入力状態 (player/入力状態作成)]
      ;; 右キー押下をシミュレート
      (player/キー押下処理 入力状態 "ArrowRight")

      (is (true? @(:右 入力状態)) "右フラグがtrueになる")))

  (testing "キーが離されると、対応する移動フラグが下がる"
    (let [入力状態 (player/入力状態作成)]
      ;; まず左キーを押す
      (player/キー押下処理 入力状態 "ArrowLeft")
      (is (true? @(:左 入力状態)) "左フラグがtrueになる")

      ;; 次に左キーを離す
      (player/キー離上処理 入力状態 "ArrowLeft")
      (is (false? @(:左 入力状態)) "左フラグがfalseになる"))))

(deftest ぷよ移動テスト
  (testing "左に移動できる場合、左に移動する"
    (let [ぷよ状態 {:x座標 2 :y座標 0 :タイプ 1 :回転状態 0}
          設定 {:ステージ列数 6}]
      (let [新規状態 (player/左に移動 ぷよ状態 設定)]
        (is (= 1 (:x座標 新規状態)) "X座標が1減少する"))))

  (testing "右に移動できる場合、右に移動する"
    (let [ぷよ状態 {:x座標 2 :y座標 0 :タイプ 1 :回転状態 0}
          設定 {:ステージ列数 6}]
      (let [新規状態 (player/右に移動 ぷよ状態 設定)]
        (is (= 3 (:x座標 新規状態)) "X座標が1増加する"))))

  (testing "左端にいる場合、左に移動できない"
    (let [ぷよ状態 {:x座標 0 :y座標 0 :タイプ 1 :回転状態 0}
          設定 {:ステージ列数 6}]
      (let [新規状態 (player/左に移動 ぷよ状態 設定)]
        (is (= 0 (:x座標 新規状態)) "X座標が変わらない"))))

  (testing "右端にいる場合、右に移動できない"
    (let [ぷよ状態 {:x座標 5 :y座標 0 :タイプ 1 :回転状態 0}
          設定 {:ステージ列数 6}]
      (let [新規状態 (player/右に移動 ぷよ状態 設定)]
        (is (= 5 (:x座標 新規状態)) "X座標が変わらない")))))

(deftest ぷよ回転テスト
  (testing "時計回りに回転すると、回転状態が1増える"
    (let [ぷよ状態 {:x座標 2 :y座標 0 :タイプ 1 :回転状態 0}]
      (let [新規状態 (player/右回転 ぷよ状態)]
        (is (= 1 (:回転状態 新規状態)) "回転状態が1になる"))))

  (testing "反時計回りに回転すると、回転状態が1減る"
    (let [ぷよ状態 {:x座標 2 :y座標 0 :タイプ 1 :回転状態 1}]
      (let [新規状態 (player/左回転 ぷよ状態)]
        (is (= 0 (:回転状態 新規状態)) "回転状態が0になる"))))

  (testing "回転状態が4になると0に戻る"
    (let [ぷよ状態 {:x座標 2 :y座標 0 :タイプ 1 :回転状態 3}]
      (let [新規状態 (player/右回転 ぷよ状態)]
        (is (= 0 (:回転状態 新規状態)) "回転状態が0に戻る")))))

(deftest 壁キック処理テスト
  (testing "右端で右回転すると、左に移動して回転する（壁キック）"
    (let [設定 {:ステージ列数 6}
          ぷよ状態 {:x座標 5 :y座標 0 :タイプ 1 :回転状態 0}]
      (let [新規状態 (player/回転実行 ぷよ状態 設定 player/右回転)]
        (is (= 4 (:x座標 新規状態)) "X座標が4になる（左に移動）")
        (is (= 1 (:回転状態 新規状態)) "回転状態が1になる"))))

  (testing "左端で左回転すると、右に移動して回転する（壁キック）"
    (let [設定 {:ステージ列数 6}
          ぷよ状態 {:x座標 0 :y座標 0 :タイプ 1 :回転状態 0}]
      (let [新規状態 (player/回転実行 ぷよ状態 設定 player/左回転)]
        (is (= 1 (:x座標 新規状態)) "X座標が1になる（右に移動）")
        (is (= 3 (:回転状態 新規状態)) "回転状態が3になる")))))
