[tox]
env_list = py310, lint, type, test
isolated_build = True

[testenv]
description = Run tests with pytest
deps =
    pytest
    pytest-cov
commands = pytest {posargs}

[testenv:test]
description = Run tests with coverage
deps =
    pytest
    pytest-cov
commands = pytest --cov=src --cov-report=html --cov-report=term-missing --verbose {posargs}

[testenv:lint]
description = Run linting with ruff
deps = ruff
commands =
    ruff check .
    ruff format --check .

[testenv:format]
description = Format code with ruff
deps = ruff
commands = ruff format .

[testenv:type]
description = Run type checking with mypy
deps =
    mypy
    pytest
commands = mypy src test {posargs}

[testenv:coverage]
description = Run coverage report
deps =
    pytest
    pytest-cov
commands = pytest --cov=src --cov-report=html --cov-report=term-missing

[testenv:all]
description = Run all quality checks
deps =
    pytest
    pytest-cov
    ruff
    mypy
commands =
    ruff check .
    ruff format --check .
    mypy src test
    pytest --cov=src --cov-report=html --cov-report=term-missing --verbose

[testenv:notebook]
description = Start Jupyter Notebook server
deps =
    jupyter
    matplotlib
    seaborn
    pandas
    scikit-learn
    numpy
changedir = notebook
commands = jupyter notebook {posargs}

[testenv:notebook-lab]
description = Start Jupyter Lab server
deps =
    jupyterlab
    matplotlib
    seaborn
    pandas
    scikit-learn
    numpy
changedir = notebook
commands = jupyter lab {posargs}

[testenv:train]
description = Train Iris classification model
deps =
    pandas
    scikit-learn
    numpy
commands = python examples/train_iris.py {posargs}

[testenv:predict]
description = Run prediction with saved model
deps =
    pandas
    scikit-learn
    numpy
commands = python examples/predict_iris.py {posargs}
