package com.example.puyo

import org.scalatest.flatspec.AnyFlatSpec
import org.scalatest.matchers.should.Matchers
import org.scalatest.BeforeAndAfterEach

class プレイヤーSpec extends AnyFlatSpec with Matchers with BeforeAndAfterEach:
  var 設定情報: 設定情報 = _
  var ぷよ画像: ぷよ画像 = _
  var ステージ: ステージ = _
  var プレイヤー: プレイヤー = _

  override def beforeEach(): Unit =
    設定情報 = new 設定情報()
    ぷよ画像 = new ぷよ画像(設定情報)
    ステージ = new ステージ(設定情報, ぷよ画像)
    プレイヤー = new プレイヤー(設定情報, ステージ, ぷよ画像)

  "プレイヤー" should "左キーが押されたときに左フラグを設定する" in {
    // キー入力をシミュレート（テスト用のメソッドを呼び出す）
    プレイヤー.キー状態を設定("ArrowLeft", pressed = true)

    プレイヤー.入力キー左 shouldBe true
  }

  it should "右キーが押されたときに右フラグを設定する" in {
    プレイヤー.キー状態を設定("ArrowRight", pressed = true)

    プレイヤー.入力キー右 shouldBe true
  }

  it should "キーが離されたときにフラグをクリアする" in {
    プレイヤー.キー状態を設定("ArrowLeft", pressed = true)
    プレイヤー.入力キー左 shouldBe true

    プレイヤー.キー状態を設定("ArrowLeft", pressed = false)
    プレイヤー.入力キー左 shouldBe false
  }

  "プレイヤー movement" should "可能な場合に左に移動する" in {
    プレイヤー.新しいぷよを作成()
    val initialX = プレイヤー.ぷよのX座標

    プレイヤー.左に移動()

    プレイヤー.ぷよのX座標 shouldBe initialX - 1
  }

  it should "可能な場合に右に移動する" in {
    プレイヤー.新しいぷよを作成()
    val initialX = プレイヤー.ぷよのX座標

    プレイヤー.右に移動()

    プレイヤー.ぷよのX座標 shouldBe initialX + 1
  }

  it should "左端では左に移動しない" in {
    プレイヤー.新しいぷよを作成()
    プレイヤー.ぷよのX座標を設定(0) // 左端に設定

    プレイヤー.左に移動()

    プレイヤー.ぷよのX座標 shouldBe 0
  }

  it should "右端では右に移動しない" in {
    プレイヤー.新しいぷよを作成()
    プレイヤー.ぷよのX座標を設定(設定情報.ステージ列数 - 1) // 右端に設定

    プレイヤー.右に移動()

    プレイヤー.ぷよのX座標 shouldBe 設定情報.ステージ列数 - 1
  }

  "プレイヤー rotation" should "時計回りに回転して回転状態をインクリメントする" in {
    プレイヤー.新しいぷよを作成()
    val initialRotation = プレイヤー.回転状態

    プレイヤー.右に回転()

    プレイヤー.回転状態 shouldBe ((initialRotation + 1) % 4)
  }

  it should "反時計回りに回転して回転状態をデクリメントする" in {
    プレイヤー.新しいぷよを作成()
    val initialRotation = プレイヤー.回転状態

    プレイヤー.左に回転()

    プレイヤー.回転状態 shouldBe ((initialRotation + 3) % 4)
  }

  it should "右回転時に回転状態を3から0にラップする" in {
    プレイヤー.新しいぷよを作成()
    プレイヤー.回転状態を設定(3)

    プレイヤー.右に回転()

    プレイヤー.回転状態 shouldBe 0
  }

  "Wall kick" should "右端で右回転時に左に移動する" in {
    プレイヤー.新しいぷよを作成()
    プレイヤー.ぷよのX座標を設定(設定情報.ステージ列数 - 1) // 右端に配置
    プレイヤー.回転状態を設定(0) // 上向き

    // 右回転（2つ目のぷよが右にくる）
    プレイヤー.右に回転()

    // 壁キックにより左に移動していることを確認
    プレイヤー.ぷよのX座標 shouldBe (設定情報.ステージ列数 - 2)
    プレイヤー.回転状態 shouldBe 1
  }

  it should "左端で左回転時に右に移動する" in {
    プレイヤー.新しいぷよを作成()
    プレイヤー.ぷよのX座標を設定(0) // 左端に配置
    プレイヤー.回転状態を設定(0) // 上向き

    // 左回転（2つ目のぷよが左にくる）
    プレイヤー.左に回転()

    // 壁キックにより右に移動していることを確認
    プレイヤー.ぷよのX座標 shouldBe 1
    プレイヤー.回転状態 shouldBe 3
  }

  "プレイヤー movement with rotation" should "2つ目のぷよが右端を超える場合は右に移動しない" in {
    プレイヤー.新しいぷよを作成()
    プレイヤー.ぷよのX座標を設定(設定情報.ステージ列数 - 1) // 右端に配置
    プレイヤー.回転状態を設定(1) // 2つ目のぷよが右にある状態

    プレイヤー.右に移動()

    // 移動していないことを確認
    プレイヤー.ぷよのX座標 shouldBe (設定情報.ステージ列数 - 1)
  }

  it should "2つ目のぷよが左端を超える場合は左に移動しない" in {
    プレイヤー.新しいぷよを作成()
    プレイヤー.ぷよのX座標を設定(0) // 左端に配置
    プレイヤー.回転状態を設定(3) // 2つ目のぷよが左にある状態

    プレイヤー.左に移動()

    // 移動していないことを確認
    プレイヤー.ぷよのX座標 shouldBe 0
  }

  "プレイヤー auto drop" should "落下間隔後に1行落ちる" in {
    プレイヤー.新しいぷよを作成()
    val initialY = プレイヤー.ぷよのY座標
    val 落下間隔 = 1000.0 // 1000ミリ秒 = 1秒

    // 落下間隔分の時間を経過させる
    プレイヤー.デルタ時間で更新(落下間隔)

    // 1マス下に落ちていることを確認
    プレイヤー.ぷよのY座標 shouldBe initialY + 1
  }

  it should "落下間隔未満では落ちない" in {
    プレイヤー.新しいぷよを作成()
    val initialY = プレイヤー.ぷよのY座標
    val 落下間隔 = 1000.0

    // 落下間隔の半分だけ経過させる
    プレイヤー.デルタ時間で更新(落下間隔 / 2)

    // 位置が変わっていないことを確認
    プレイヤー.ぷよのY座標 shouldBe initialY
  }

  it should "下端を超えて落ちない" in {
    プレイヤー.新しいぷよを作成()
    プレイヤー.ぷよのY座標を設定(設定情報.ステージ行数 - 1) // 下端に配置

    // 落下処理を実行
    プレイヤー.デルタ時間で更新(1000.0)

    // 位置が変わっていないことを確認（下端を超えない）
    プレイヤー.ぷよのY座標 shouldBe 設定情報.ステージ行数 - 1
  }

  "プレイヤー landing" should "fix puyo to ステージ when landed" in {
    プレイヤー.新しいぷよを作成()
    プレイヤー.ぷよのY座標を設定(設定情報.ステージ行数 - 2) // 下端の1つ上に配置
    プレイヤー.回転状態を設定(2) // 2つ目のぷよが下にある状態

    // 落下処理を実行（着地する）
    プレイヤー.デルタ時間で更新(1000.0)

    // ステージにぷよが固定されていることを確認
    ステージ.ぷよを取得(プレイヤー.ぷよのX座標, 設定情報.ステージ行数 - 2) should be > 0
    ステージ.ぷよを取得(プレイヤー.ぷよのX座標, 設定情報.ステージ行数 - 1) should be > 0
  }

  it should "set landed flag when puyo lands" in {
    プレイヤー.新しいぷよを作成()
    プレイヤー.ぷよのY座標を設定(設定情報.ステージ行数 - 2)
    プレイヤー.回転状態を設定(2)

    // 落下処理を実行（着地する）
    プレイヤー.デルタ時間で更新(1000.0)

    // 着地フラグが立っていることを確認
    プレイヤー.着地した() shouldBe true
  }

  it should "land on top of existing puyo" in {
    // ステージの底に既存のぷよを配置
    ステージ.ぷよを設定(2, 設定情報.ステージ行数 - 1, 1)

    プレイヤー.新しいぷよを作成()
    プレイヤー.ぷよのY座標を設定(設定情報.ステージ行数 - 3)
    プレイヤー.回転状態を設定(2) // 2つ目のぷよが下

    // 2回落下（着地するまで）
    プレイヤー.デルタ時間で更新(1000.0)
    プレイヤー.デルタ時間で更新(1000.0)

    // 既存のぷよの上に着地していることを確認
    ステージ.ぷよを取得(2, 設定情報.ステージ行数 - 3) should be > 0
    ステージ.ぷよを取得(2, 設定情報.ステージ行数 - 2) should be > 0
  }

  "プレイヤー fast drop" should "下キーが押されていると、落下速度が上がる" in {
    プレイヤー.新しいぷよを作成()

    // 下キーを押す
    プレイヤー.キー状態を設定("ArrowDown", pressed = true)

    // 通常の落下速度
    val normalDropSpeed = 1.0
    val fastDropSpeed = プレイヤー.落下速度を取得()

    // 高速落下の速度が通常より速いことを確認
    fastDropSpeed should be > normalDropSpeed
  }

  it should "下キーが押されていると、タイマーが速く進む" in {
    プレイヤー.新しいぷよを作成()
    val initialY = プレイヤー.ぷよのY座標

    // 下キーを押す
    プレイヤー.キー状態を設定("ArrowDown", pressed = true)

    // 通常の落下間隔の1/10の時間で落下するはず（速度10倍）
    プレイヤー.デルタ時間で更新(100.0) // 100ms

    // 1マス下に落ちていることを確認
    プレイヤー.ぷよのY座標 shouldBe initialY + 1
  }
