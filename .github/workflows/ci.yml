name: CI

on:
  push:
    branches: [ case-1, main, develop ]
  pull_request:
    branches: [ case-1, main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: app/package-lock.json
    
    - name: Install dependencies
      working-directory: ./app
      run: npm ci
    
    - name: Run linter
      working-directory: ./app
      run: npm run lint
    
    - name: Run formatter check
      working-directory: ./app
      run: npm run format:check
    
    - name: Run tests
      working-directory: ./app
      run: npm run test
    
    - name: Run test coverage
      working-directory: ./app
      run: npm run test:coverage
    
    - name: Build
      working-directory: ./app
      run: npm run build
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./app/coverage/lcov.info
        fail_ci_if_error: false

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/case-1'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: app/package-lock.json
    
    - name: Install dependencies
      working-directory: ./app
      run: npm ci
    
    - name: Install Vercel CLI
      if: github.ref == 'refs/heads/case-1'
      run: npm install --global vercel@latest
    
    - name: Pull Vercel Environment Information
      if: github.ref == 'refs/heads/case-1'
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      working-directory: ./app
      env:
        VERCEL_ORG_ID: ${{ secrets.ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.PROJECT_ID }}
    
    - name: Build Project Artifacts
      if: github.ref == 'refs/heads/case-1'
      run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      working-directory: ./app
      env:
        VERCEL_ORG_ID: ${{ secrets.ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.PROJECT_ID }}
    
    - name: Deploy Project Artifacts to Vercel
      if: github.ref == 'refs/heads/case-1'
      run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
      working-directory: ./app
      env:
        VERCEL_ORG_ID: ${{ secrets.ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.PROJECT_ID }}